<?php
//-----------------------------------------------------------------------------
// Copyright (c) 2012 GarageGames, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//-----------------------------------------------------------------------------

// Libs
includeLib( 'mng' );
includeLib( 'png' );
includeLib( 'ungif' );
includeLib( 'zlib' );
includeLib( 'jpeg' );
includeLib( 'tinyxml' );
includeLib( 'opcode' );
includeLib( 'squish' );
includeLib( 'collada_dom' );
includeLib( 'pcre' ); 
includeLib( 'convexDecomp' ); 

// Use FMOD on consoles
if ( Generator::$platform != "360" && Generator::$platform != "ps3" )
{
   includeLib( 'libvorbis' );
   includeLib( 'libogg' );
   includeLib( 'libtheora' );
}

$ext = "DLL";
if ( Generator::$platform == "mac" )
   $ext = "Bundle";

beginAppConfig( getGameProjectName(), '{C0FCDFF9-E125-412E-87BC-2D89DB971CAB}', 'game', getGameProjectName() );
        
    /// Prefs
    addProjectDefine( 'TORQUE_SHADERGEN' );
    addProjectDefine( 'TORQUE_UNICODE' );
    
    /// For OPCODE
    addProjectDefine( 'BAN_OPCODE_AUTOLINK' );
    addProjectDefine( 'ICE_NO_DLL' );
    addProjectDefine( 'TORQUE_OPCODE' );

    // For libTomCrypt
    addProjectDefine( 'LTC_NO_PROTOTYPES' );
    
    // Additional includes
    addIncludePath( "../../game/shaders" );
    
    addLibIncludePath( "lmng" );
    addLibIncludePath( "lpng" );
    addLibIncludePath( "ljpeg" );
    addLibIncludePath( "lungif" );
    addLibIncludePath( "zlib" );
    addLibIncludePath( "tinyxml" );
    addLibIncludePath( "opcode" );
    addLibIncludePath( "squish" );
    addLibIncludePath( "convexDecomp" );
    
    if ( Generator::$platform != "360" && Generator::$platform != "ps3" )
    {
      addLibIncludePath( "libvorbis/include" );
      addLibIncludePath( "libogg/include" );
      addLibIncludePath( "libtheora/include" );
    }
    
    // Modules
    
    includeModule( 'Torque3D' );
    includeModule( 'core' );
    includeModule( 'dsound' );
    includeModule( 'fmod');
    includeModule( 'T3D' );
    includeModule( 'advancedLighting' );
    includeModule( 'basicLighting' );
    includeModule( 'collada' );
    
    if ( Generator::$platform != "360" && Generator::$platform != "ps3" )
    {
      includeModule( 'vorbis' );
      includeModule( 'theora' );
    }
   
    if(Generator::$platform == "mac" || Generator::$platform == "win32")
       includeModule( 'openal' );

    // Demo functionality
    if (getDemoBuild())
       includeModule( 'demo' );
    if (getWatermarkBuild())
       includeModule( 'demoWatermark' );
    if (getPurchaseScreenBuild())
       includeModule( 'demoPurchaseScreen' );
    if (getObjectLimitBuild())
       includeModule( 'demoObjectLimit' );
    if (getTimeOutBuild())
       includeModule( 'demoTimeout' );
   
    // Dependencies
    
    addProjectDependency( 'lmng' );
    addProjectDependency( 'lpng' );
    addProjectDependency( 'lungif' );
    addProjectDependency( 'ljpeg' );
    addProjectDependency( 'zlib' );
    addProjectDependency( 'tinyxml' );   
    addProjectDependency( 'opcode' );
    addProjectDependency( 'squish' );
    addProjectDependency( 'collada_dom' );
    addProjectDependency( 'pcre' );
    addProjectDependency( 'convexDecomp' );
    
    if ( Generator::$platform != "360" && Generator::$platform != "ps3" )
    {
      addProjectDependency( 'libvorbis' );
      addProjectDependency( 'libogg' );
      addProjectDependency( 'libtheora' );
    }

    if ( Generator::$platform == "mac" )
    {    
        addProjectDefine( '__MACOSX__' );
        addProjectDefine( 'LTM_DESC' );
    }

    if (Generator::$platform == "win32")
    {
        addProjectDefine( 'UNICODE' );
        addProjectDefine( 'INITGUID' );
        addProjectDefine( '_CRT_SECURE_NO_DEPRECATE' );
        

        addProjectLibInput('COMCTL32.LIB');
        addProjectLibInput('COMDLG32.LIB');
        addProjectLibInput('USER32.LIB');
        addProjectLibInput('ADVAPI32.LIB');
        addProjectLibInput('GDI32.LIB');
        addProjectLibInput('WINMM.LIB');
        addProjectLibInput('WSOCK32.LIB');
        addProjectLibInput('vfw32.lib');
        addProjectLibInput('Imm32.lib');
        addProjectLibInput('d3d9.lib');
        addProjectLibInput('d3dx9.lib');
        addProjectLibInput('DxErr.lib');
        addProjectLibInput('ole32.lib');
        addProjectLibInput('shell32.lib');
        addProjectLibInput('oleaut32.lib');
        addProjectLibInput('version.lib');
    }
    
    // Include project specific sources in the project/buildFiles/config/projectCode.conf
    $projectCode = realpath($argv[1])."/buildFiles/config/projectCode.conf";
    echo( "\n   - Loading project code configuration from ".$projectCode."\n");
    include $projectCode;

endAppConfig();

// Add solution references for Visual Studio projects
if (Generator::$platform == "win32" || Generator::$platform == "360" || Generator::$platform == "ps3")
{
   beginSolutionConfig( getGameProjectName(), '{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}' );
   
   addSolutionProjectRef( getGameProjectName() );
   addSolutionProjectRef( 'collada_dom' );
   addSolutionProjectRef( 'ljpeg' );
   addSolutionProjectRef( 'lmng' );
   addSolutionProjectRef( 'lpng' );
   addSolutionProjectRef( 'lungif' );
   addSolutionProjectRef( 'opcode' );
   addSolutionProjectRef( 'pcre' );
   addSolutionProjectRef( 'squish' );
   addSolutionProjectRef( 'tinyxml' );
   addSolutionProjectRef( 'zlib' );
   addSolutionProjectRef( 'convexDecomp' );
   
   if (Generator::$platform == "win32")
   {
      addSolutionProjectRef( 'libogg' );
      addSolutionProjectRef( 'libvorbis' );
      addSolutionProjectRef( 'libtheora' );
   }
   
   endSolutionConfig();
}

?>
